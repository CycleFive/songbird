searchState.loadedDescShard("songbird", 0, "project logo\nThe Call handler is responsible for a single voice …\nConfiguration for drivers and calls.\nParameters and information needed to start communicating …\nAn iterator over all <code>Call</code>s currently stored in the manager …\nA shard-aware struct responsible for managing <code>Call</code>s.\nID of the voice channel being joined, if it is known.\nSets this <code>Config</code>’s symphonia codec registry.\nRegistry of the inner codecs supported by the driver, …\nConstants affecting driver function and API handling.\nSets this <code>Config</code>’s chosen cryptographic tagging scheme.\nSelected tagging mode for voice packet encryption.\nReturns <code>id</code> of the channel, if connected or connecting to …\nReturns the current voice connection details for this Call,\nSets whether the current connection is to be deafened.\nSets this <code>Config</code>’s channel layout for output audio when …\nConfigures the channel layout for output audio when using …\nSets this <code>Config</code>’s received packet decryption/decoding …\nConfigures whether decoding and decryption occur for all …\nSets this <code>Config</code>’s sample rate for output audio when …\nConfigures the sample rate for output audio when using …\nSets this <code>Config</code>’s received packet decoder cleanup timer.\nConfigures the amount of time after a user/SSRC is …\nSets this <code>Config</code>’s channel for sending disposal messages.\nThe Sender for a channel that will run the destructor of …\nRunner for a voice connection.\nSets this <code>Config</code>’s voice connection retry configuration.\nConnection retry logic for the <code>Driver</code>.\nSets this <code>Config</code>’s timeout for establishing a voice …\nConfigures the maximum amount of time to wait for an …\nURL of the voice websocket gateway server assigned to this …\nDriver and gateway error handling.\nEvents relating to tracks, timing, and other callers.\nSets this <code>Config</code>’s symphonia format registry/probe set.\nRegistry of the muxers and container formats supported by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Call, configuring the driver as specified.\nSets this <code>Config</code>’s timeout for joining a voice channel.\nConfigures the amount of time to wait for Discord to reply …\nRetrieves a <code>Call</code> for the given guild, if one already …\nRetrieves a <code>Call</code> for the given guild, creating a new one if\nReturns a lightweight reference to the audio scheduler …\nID of the target voice channel’s parent guild.\nNewtypes around Discord IDs for library …\nSet the bot’s user, and the number of shards in use.\nRaw audio input data streams and sources.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the current connection is self-deafened in …\nReturns whether the current connection is self-muted in …\nCreates an iterator for all <code>Call</code>s currently managed.\nFuture types for gateway interactions.\nConnect or switch to the given voice channel by its Id.\nConnects to a target by retrieving its relevant <code>Call</code> and …\nJoin the selected voice channel, <em>without</em> running/starting …\nPartially connects to a target by retrieving its relevant …\nLeaves the current voice channel, disconnecting from it.\nRetrieves the handler for the given target and leaves the …\nSets this <code>Config</code>’s audio mixing channel count.\nConfigures whether the driver will mix and output stereo …\nSets whether the current connection is to be muted.\nCreates a new Call, which will send out WebSocket messages …\nSets this <code>Config</code>’s playout buffer length, in packets.\nConfigures the number of audio packets to buffer for each …\nSets this <code>Config</code>’s additional pre-allocated space to …\nConfigures the initial amount of extra space allocated to …\nSets this <code>Config</code>’s number of tracks to preallocate.\nNumber of concurrently active tracks to allocate memory …\nHandle events received on the cluster.\nRetrieves the <code>Call</code> for the given target and leaves the …\nSets this <code>Config</code>’s mixer scheduler.\nThe scheduler is responsible for mapping idle and active …\nCompatibility and convenience methods for working with …\nCreate a new Songbird instance for serenity.\nCreate a new Songbird instance for serenity, using the …\nUnique string describing this session for …\nSets a shared configuration for all drivers created from …\nHandlers for sending packets over sharded connections.\nCreates a new, standalone Call which is not connected via …\nCreates a new standalone Call from the given configuration …\nEphemeral secret used to validate the above session.\nLive, controllable audio instances.\nCreate a new Songbird instance for twilight.\nCreate a new Songbird instance for twilight.\nUpdates the voice server data.\nUpdates the internal voice state of the current user.\nSets this <code>Config</code>’s number to enable/disable …\nConfigures whether or not each mixed audio packet is …\nUserID of this bot.\nNumber of audio frames/packets to be sent per second.\nMaximum number of audio frames/packets to be sent per …\nDefault bitrate for audio.\nLength (in milliseconds) of any audio frame.\nNumber of bytes in one complete frame of raw <code>f32</code>-encoded …\nNumber of samples in one complete frame of audio per …\nProfile type used by Discord’s Opus audio traffic.\nThe one (and only) RTP version.\nSample rate of audio to be sent to Discord.\nSample rate of audio to be sent to Discord.\nOpus silent frame, used to signal speech start and end …\nNumber of bytes in one complete frame of raw <code>f32</code>-encoded …\nNumber of individual samples in one complete frame of …\nLength of time between any two audio frames.\nType-converted delay between sends of UDP keepalive frames.\nDelay between sends of UDP keepalive frames.\nThe voice gateway version used by the library.\nMaximum packet size for a voice packet.\nDiscord’s currently preferred non-E2EE encryption scheme.\nDefault bitrate decided by the encoder (not recommended).\nOpus encoder bitrate settings.\nExplicit bitrate choice (in bits/second).\nThe channel layout of output audio when using …\nFuture for a call to <code>Driver::connect</code>.\nVariants of the <code>XSalsa20Poly1305</code> encryption scheme.\nThe default shared scheduler instance.\nDecrypts and decodes each received packet, correctly …\nDecode behaviour for received RTP packets within the …\nDecrypts the body of each received packet.\nThe scheduler exited or crashed while awating the request.\nThe control object for a Discord voice connection, …\nDecode to a sample rate of 12kHz.\nDecode to a sample rate of 16kHz.\nDecode to a sample rate of 24kHz.\nDecode to a sample rate of 48kHz.\nDecode to a sample rate of 8kHz.\nAn additional random 4B suffix is used as the source of …\nRuntime statistics for an individual worker.\nMaximum bitrate allowed (up to maximum number of bytes for …\nAllows at most <code>n</code> tasks to run per thread.\nMixing behaviour for sent audio sources processed within …\nDecode received audio packets into a single channel.\nAudio sources will be downmixed into a mono buffer.\nThe RTP header is used as the source of nonce bytes for …\nPackets received from Discord are handed over to events …\nThe sample rate of output audio when using …\nA reference to a shared group of threads used for running …\nConfiguration for how a <code>Scheduler</code> handles tasks.\nErrors encountered when communicating with the internals …\nStrategies for mapping live mixer tasks to individual …\nDecode received audio packets into two interleaved …\nAudio sources will be mixed into into a stereo buffer, …\nAn additional random 24B suffix is used as the source of …\nA fallback non-E2EE encryption scheme.\nAttach a global event handler to an audio context. Global …\nReturns the nonce length in bytes required by algorithm.\nReturns a view of this driver’s configuration.\nConnects to a voice channel using the specified server.\nLeaves the current connected voice channel, if connected …\nEncrypts a Discord RT(C)P packet using the given …\nAdds an existing <code>Track</code> to this driver’s built-in queue.\nAdds an audio <code>Input</code> to this driver’s built-in queue.\nAdd an existing <code>Track</code> to the queue, using a known time to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the driver is muted (i.e., processes audio …\nReturns the number of nanoseconds required to process all …\nLeaves the current voice channel, disconnecting from it.\nReturns the number of mixer tasks scheduled on this worker …\nReturns the total number of <em>active</em> calls scheduled and …\nMove costly mixers to another thread if their parent …\nSets whether the current connection is to be muted.\nCreate a new mixer scheduler from the allocation strategy …\nCreates a new voice driver.\nReturns the number of bytes each nonce is stored as within …\nOpus encoder bitrate settings.\nCalculates the number of additional bytes required compared\nReturns the number of bytes occupied by the …\nReturns the number of bytes occupied by the encryption …\nPlays audio from a <code>Track</code> object.\nPlays audio from an input, returning a handle for further …\nExclusively plays audio from a <code>Track</code> object.\nPlays audio from an input, returning a handle for further …\nReturns a reference to this driver’s built-in queue.\nRemoves all global event handlers from an audio context.\nConfiguration for connection retries.\nSets the bitrate for encoding Opus packets sent along the …\nSets the configuration for this driver (and parent <code>Call</code>, …\nReturns whether this mode will decrypt received packets.\nStops playing audio from all sources, if any are set.\nHow Live mixer tasks will be mapped to individual threads.\nReturns the number of bytes occupied by an encryption …\nReturns the name of a mode as it will appear during …\nReturns the total number of calls (idle and active) …\nRequest a list of handles to statistics for currently live …\nRequest a list of handles to statistics for currently live …\nReturns the total number of threads spawned to process …\nExponential backoff waiting strategy, where the duration …\nThe driver will wait for the same amount of time between …\nExponential backoff waiting strategy.\nConfiguration to be used for retrying driver connection …\nLogic used to determine how long to wait between retry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAmount of uniform random jitter to apply to generated wait …\nMaximum amount of time to wait between retries.\nMinimum amount of time to wait between retries.\nThe maximum number of retries to attempt.\nStrategy used to determine how long to wait between retry …\nThe driver hung up an internal signaller, either due to …\nErrors encountered while connecting to a Discord voice …\nConvenience type for Discord voice/driver connection error …\nAn error occurred during [en/de]cryption of voice packets.\nThe symmetric key supplied by Discord had the wrong size.\nServer did not return the expected crypto mode during …\nSelected crypto mode was not offered by server.\nThe driver failed to establish a voice connection.\nRequest to join was dropped, cancelled, or replaced.\nAn indicator that an endpoint URL was invalid.\nContains the error value\nContains the error value\nDiscord failed to correctly respond to IP discovery.\nCould not parse Discord’s view of our IP.\nFailed to message other background tasks after connection …\nMiscellaneous I/O error.\nError returned when a manager or call handler is unable to …\nConvenience type for Discord gateway error handling.\nJSON (de)serialization error.\nThis type represents all possible errors that can occur …\nTried to leave a <code>Call</code> which was not found.\nNo available gateway connection was provided to send voice …\nContains the success value\nContains the success value\nSerenity-specific WebSocket send error.\nConnection attempt timed out.\nConnection details were not received from Discord in the …\nTwilight-specific WebSocket send error when a message …\nError communicating with gateway server over WebSocket.\nCategorizes the cause of this error.\nOne-based column number at which the error was detected.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind reported by the underlying standard library I/O …\nReturns true if this error was caused by input data that …\nReturns true if this error was caused by prematurely …\nReturns true if this error was caused by a failure to read …\nReturns true if this error was caused by input that was not\nOne-based line number at which the error was detected.\nIndicates whether this failure may have left (or been …\nIndicates whether this failure can be reattempted via …\nCancels the event, if it was intended to persist.\nFired whenever a client disconnects.\nFires whenever a user disconnects from the same stream as …\nUntimed events belonging to the global context, such as …\nCore events\nVoice core events occur on receipt of voice packets and …\nDelayed events rely upon a <em>delay</em> parameter, and fire one …\nFires when this driver successfully connects to a voice …\nFires when this driver successfully connects to a voice …\nFires when this driver fails to connect to, or drops from, …\nFires when this driver fails to connect to, or drops from, …\nFires when this driver successfully reconnects after a …\nFires when this driver successfully reconnects after a …\nThe attached track has ended.\nThe attached track has encountered a runtime or …\nClasses of event which may occur, triggering a handler at …\nInformation about which tracks or data fired an event.\nInternal representation of an event, as handled by the …\nTrait to handle an event which can be fired per-track, or …\nStorage for <code>EventData</code>, designed to be used for both local …\nThe attached track has looped.\nThe attached track has been paused.\nPeriodic events rely upon two parameters: a <em>period</em> and an …\nThe attached track has resumed playing.\nThe attached track has become playable.\nThe attached track is being readied or recreated.\nTelemetry/statistics packet, received from another stream.\nFires on receipt of an RTCP packet, containing various …\nOpus audio packet, received from another stream.\nFires on receipt of a voice packet from another stream in …\nSpeaking state update, typically describing how another …\nSpeaking state update from the WS gateway, typically …\nTrack event context, passed to events created via …\nUntimed events belonging to a track, such as state …\nTrack events correspond to certain actions or changes of …\nTrack events correspond to certain actions or changes of …\nTrack and voice core events.\nReordered and decoded audio packets, received every 20ms.\nFires every 20ms, containing the scheduled voice packet …\nRespond to one received event.\nAdd an event to this store.\nComputes the next firing time for a timer event.\nTypes containing the main body of an <code>EventContext</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a representation of an event and its associated …\nCreates a new event store to be used globally.\nCreates a new event store to be used within a <code>Track</code>.\nRetreive the event class for an event (i.e., when matching)\nThis (re)connection attempt was dropped due to another …\nThe voice driver failed to connect to the server.\nVoice connection details gathered at setup/reinstantiation.\nVoice connection details gathered at termination or …\nThe location that a voice connection was terminated.\nThe reason that a voice connection failed.\nSongbird had an internal error.\nA host-specific I/O error caused the fault; this is likely …\nSongbird and Discord disagreed on the protocol used to …\nThe voice driver failed to reconnect to the server.\nThe call was manually disconnected by a user command, e.g. …\nTelemetry/statistics packet, received from another stream\nOpus audio packet, received from another stream\nThe voice connection was terminated mid-session by either …\nA voice connection was not established in the specified …\nVoice packet and audio data for a single user, from a …\nAudio data from all users in a voice channel, fired every …\nThe Websocket connection was closed by Discord.\nID of the voice channel being joined, if it is known.\nID of the voice channel being joined, if it is known.\nPCM audio obtained from a user.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the target voice channel’s parent guild.\nID of the target voice channel’s parent guild.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe location that a voice connection was terminated.\nRaw RTCP packet data.\nRaw RTP packet data.\nRTP packet clocked out for this tick.\nNumber of bytes at the end of the packet to discard.\nNumber of bytes at the end of the packet to discard.\nByte index into the packet body (after headers) for where …\nByte index into the packet body (after headers) for where …\nThe cause of any connection failure.\nCreate a zero-copy view of the inner RTCP packet.\nCreate a zero-copy view of the inner RTP packet.\nThe domain name of Discord’s voice/TURN server.\nUnique string describing this session for …\nUnique string describing this session for …\nSet of all SSRCs currently known in the call who aren’t …\nDecoded voice data and source packets sent by each user.\nThe RTP SSRC <em>(“Synchronisation source”)</em> assigned by …\nID of a Discord voice/text channel.\nID of a Discord guild (colloquially, “server”).\nID of a Discord user.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn adapter for converting an async media source into a …\nAn async port of symphonia’s <code>MediaSource</code>.\n<code>AsyncReadOnlySource</code> wraps any source implementing …\nAn unread byte stream for an audio file.\nErrors encountered when creating an <code>AudioStream</code> or …\nExtra information about an <code>Input</code> which is acquired without …\nErrors encountered when trying to access out-of-band …\nHandle for a child process which ensures that any …\nData and behaviour required to instantiate a lazy audio …\nFailed to create a <code>LiveInput</code> from the lazy <code>Compose</code>.\nThe operation failed, and should not be retried.\nA lazily instantiated local file.\nLazy HLS stream\nA lazily instantiated HTTP request.\nAn audio source, which can be live or lazily initialised.\nA byte source which is not yet initialised.\nAn initialised byte source.\nAn initialised audio source.\nErrors encountered when readying or pre-processing an <code>Input</code>…\nIn-stream information about an <code>Input</code> acquired by parsing …\nErrors encountered when trying to access in-stream <code>Metadata</code>…\nThis input has no lazy <code>Compose</code> initialiser, which is …\nThis input is currently lazily initialised, and must be …\nThis input is ready, but has not had its headers parsed.\nA blocking thread panicked or failed to return a parsed …\nFailed to read headers, codecs, or a valid stream from a …\nAn audio file which has had its headers parsed and decoder …\nAn audio file which has had its headers parsed and decoder …\nAn unread, raw file stream.\nAdapter around a raw, interleaved, <code>f32</code> PCM byte stream.\nThere was an error when trying to access auxiliary …\nThe operation failed, and should be retried after a given …\nThe operation was not supported, and will never succeed.\nAn unread file which has been wrapped with a large …\nA lazily instantiated call to download a file, finding its …\nThe album name of this stream.\nThe main artist of this stream.\nRequests auxiliary metadata which can be accessed without …\nRequests auxiliary metadata which can be accessed without …\nRequests auxiliary metadata which can be accessed without …\nReturns the length in bytes, if available. This may be an …\nIn-memory, shared input sources for reuse between calls, …\nThe YouTube channel of this stream.\nThe number of audio channels in this stream.\nA reqwest client instance used to send the HTTP GET …\nCodec registries extending Symphonia’s probe and …\nContent length, used as an upper bound in range requests …\nCreate a source synchronously.\nCreate a source asynchronously.\nThe date of creation of this stream.\nDecoder state for the chosen track.\nThe reported duration of this stream.\nMetadata found inside the format/container of an audio …\nAudio packet, seeking, and state access for all tracks in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract metadata and details from the output of …\nGets a reference to the underlying reader.\nHTTP header fields to add to any created requests.\nExtension and MIME type information which may help guide …\nThe wrapped file stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>AsyncReadOnlySource</code>, returning the underlying …\nReturns whether this stream’s headers have been fully …\nReturns whether this audio stream is full initialised, …\nReturns if the source is seekable. This may be an …\nReturns a reference to the live input, if it has been …\nReturns a mutable reference to the live input, if it been …\nInitialises (but does not parse) an <code>Input::Lazy</code> into an …\nInitialises (but does not parse) an <code>Input::Lazy</code> into an …\nInitialises and parses an <code>Input::Lazy</code> into an <code>Input::Live</code>, …\nInitialises and parses an <code>Input::Lazy</code> into an <code>Input::Live</code>, …\nMetadata extracted by symphonia while detecting a file’s …\nTries to get any information about this audio stream …\nTries to get any information about this audio stream …\nWrap and pull from an async file stream, with an …\nWrap an input PCM byte source to be readable by symphonia.\nCreate a new <code>ChildContainer</code> from a child process\nCreates a lazy file object, which will open the target …\nCreate a lazy HLS request.\nCreate a lazy HTTP request.\nCreates a lazy request to select an audio stream from <code>url</code>, …\nInstantiates a new <code>AsyncReadOnlySource</code> by taking ownership …\nCreates a request to search youtube for an optionally …\nCreates a request to search youtube for an optionally …\nCreate a lazy HTTP request.\nCreate a lazy HTTP request.\nCreates a lazy request to select an audio stream from <code>url</code> …\nReturns a reference to the data parsed from this input …\nReturns a reference to the data parsed from this input …\nReturns a mutable reference to the data parsed from this …\nReturns a mutable reference to the data parsed from this …\nMetadata found while probing for the format of an <code>Input</code> …\nConverts this audio source into a <code>Parsed</code> object using the …\nThe target URL of the required resource.\nThe sample rate of this stream.\nRuns a search for the given query, returning a list of up …\nDetermines whether this source will be instantiated using …\nThe source url of this stream.\nThe time at which the first true sample is played back.\nWhether the contained format supports arbitrary seeking.\nMove all fields from an <code>AuxMetadata</code> object into a new one.\nThe thumbnail url of this stream.\nThe YouTube title of this stream.\nThe track name of this stream.\nThe chosen track’s ID.\nTries to recreate this stream in event of an error, …\nTries to recreate this stream in event of an error, …\nSets additional arguments for the “yt-dlp” process\nUtility methods for seeking or decoding.\nEstimate of a source’s length in bytes.\nErrors encountered using a <code>Compressed</code> or <code>Decompressed</code> …\nA wrapper around an existing <code>Input</code> which compresses the …\nConfiguration for a cached source.\nThe audio stream could not be created.\nThe audio stream could not be created.\nThe audio stream failed to be created due to a panic in …\nThe audio stream failed to be created due to a panic in …\nA wrapper around an existing <code>Input</code> which caches the …\nErrors encountered using a <code>Memory</code> cached source.\nExpected amount of time that an input should last.\nA wrapper around an existing <code>Input</code> which caches its data …\nThe file’s metadata could not be converted to JSON.\nThe input’s metadata was too large after conversion to …\nThe Opus encoder could not be created.\nTransform applied inside <code>Compressed</code>, converting a …\nSymphonia failed to parse the container or decode the …\nThe input stream had already been read (i.e., <code>Parsed</code>) and …\nThe input stream had already been read (i.e., <code>Parsed</code>) and …\nStreamcatcher’s configuration was illegal, and the cache …\nStreamcatcher’s configuration was illegal, and the cache …\nEstimate of a source’s length in time.\nThe audio stream’s channel count could not be determined.\nModify the given cache configuration to initially allocate …\nRegistry of audio codecs supported by the driver.\nEstimates the cost, in B/s, of audio data compressed at …\nProvides the default config used by a cached source.\nGenerate a storage configuration given an estimated …\nRegistry of the muxers and container formats supported by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap an existing <code>Input</code> with an in-memory store, compressed …\nWrap an existing <code>Input</code> with an in-memory store, …\nWrap an existing <code>Input</code> with an in-memory store with the …\nAcquire a new handle to this object, creating a new view …\nAcquire a new handle to this object, creating a new view …\nAcquire a new handle to this object, creating a new view …\nInner shared bytestore.\nInner shared bytestore.\nInner shared bytestore.\nCalculates the cost, in B/s, of raw floating-point audio …\nConfiguration for the inner streamcatcher instance.\nWrap an existing <code>Input</code> with an in-memory store, compressed …\nWrap an existing <code>Input</code> with an in-memory store, …\nWrap an existing <code>Input</code> with an in-memory store with the …\nDefault Symphonia <code>CodecRegistry</code>, including the …\nDCA[0/1] Format reader for Symphonia.\nOpus decoder for symphonia, based on libopus v1.3 (via …\nDefault Symphonia Probe, including DCA format support.\nSymphonia support for a simple container for raw f32-PCM …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the time position in a <code>FloatPCM</code> stream from a …\nCreate an Opus decoder outputting at a sample rate of …\nCalculates the time position in a <code>FloatPCM</code> stream from a …\nCalculates the byte position in a <code>FloatPCM</code> stream from a …\nCalculates the sample position in a <code>FloatPCM</code> stream from a …\nFuture for a call to <code>Call::join</code>.\nFuture for a call to <code>Call::join_gateway</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper trait to add installation/creation methods to …\nZero-size type used to retrieve the registered <code>Songbird</code> …\nReturns the argument unchanged.\nRetrieve the Songbird voice client from a serenity context…\nCalls <code>U::from(self)</code>.\nInstalls a new songbird instance into the serenity client.\nInstalls a given songbird instance into the serenity …\nRegisters a new Songbird voice system with serenity, …\nRegisters a Songbird voice system serenity, based on the …\nRegisters a given Songbird voice system with serenity, as …\nInstalls a given songbird instance into the serenity …\nA generic shard handle source.\nHandle to a generic shard instance.\nTrait for a generic shard cluster or other handle source.\nSerenity-specific wrapper for sharder state initialised by …\nHandle to one of serenity’s shard runners.\nHandle to an individual shard designed to buffer unsent …\nSerenity-specific wrapper for sharder state initialised by …\nA reference to an individual websocket connection.\nSource of individual shard connection handles.\nTwilight-specific wrapper for a map of command senders.\nHandle to a map of twilight command senders.\nMap containing <code>MessageSender</code>s for Twilight.\nTrait for a generic shard handle to send voice state …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the message sender for <code>shard_id</code>.\nGet access to a new shard\nReturns a new handle to the required inner shard.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a map of shards and command senders to those …\nGet the total number of shards in the map.\nSend a voice update message to the inner shard handle.\nActions for the mixer to take after inspecting track state …\nErrors associated with control and manipulation of tracks.\nFailed to create a live bytestream from the lazy <code>Compose</code>.\nFailed to decode a frame received from an <code>Input</code>.\nAnother <code>seek</code>/<code>make_playable</code> request was made, and so this …\nThe track has naturally ended, and cannot be restarted.\nContains the error value\nThe track has encountered a runtime or initialisation …\nThe operation failed because the track has ended, has been …\nTrack will loop <code>n</code> more times.\nTrack will loop endlessly until loop state is changed or …\nThe supplied event listener can never be fired by a track, …\nLooping behaviour for a <code>Track</code>.\nContains the success value\nFailed to read headers, codecs, or a valid stream from an …\nThe track is currently paused, and may be resumed.\nA command to seek or ready the target track failed when …\nThe track is currently playing.\nErrors reported by the mixer while attempting to play (or …\nPlayback status of a track.\nThis track is fully initialised and usable.\nThe mixer is currently creating and parsing this track’s …\nReference to a track which is known to be part of a queue.\nWhether this track has been made live, is being processed, …\nFailed to seek to the requested location.\nThe track has been manually stopped, and cannot be …\nInitial state for audio playback.\nAsynchronous reply for an operation applied to a …\nHandle for safe control of a <code>Track</code> from other threads, …\nA simple queue for several audio sources, designed to play …\nAlias for most calls to a <code>TrackHandle</code>.\nState of an <code>Track</code> object, designed to be passed to event …\nThis track is still a lazy <code>Compose</code> object, and hasn’t …\nLive track and input state exposed during …\nPerform an arbitrary synchronous action on a raw <code>Track</code> …\nAdds a <code>Track</code> object to the queue, to be played in the …\nAttach an event handler to an audio track. These will …\nAdds an audio source to the queue, to be played in the …\nAdd an existing <code>Track</code> to the queue, using a known time to …\nReturns a handle to the currently playing track.\nReturns a list of currently queued tracks.\nAttempts to remove a track from the specified index.\nSet an audio track to no longer loop.\nSet an audio track to loop indefinitely.\nList of events attached to this audio track.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequest playback information and state from the audio …\nClones the inner handle\nThe live or lazily-initialised audio stream to be played.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the track has irreversibly stopped.\nReturns whether there are no tracks currently in the queue.\nReturns <code>true</code> if the operation instantly failed due to the …\nReturns the number of tracks currently in the queue.\nSet an audio track to loop a set number of times.\nSet an audio track to loop a set number of times.\nThe number of remaning loops on this track.\nCount of remaining loops.\nRemaining loops on this track.\nReadies the track to be playable, if this is not already …\nReady a track for playing if it is lazily initialised.\nReady a track for playing if it is lazily initialised.\nIn-stream metadata for this track, if it is fully readied.\nAllows modification of the inner queue (i.e., deletion, …\nCreate a new track directly from an <code>Input</code> and a random <code>Uuid</code>…\nCreate a new, empty, track queue.\nCreate a new track directly from an <code>Input</code> with a custom …\nPre-emptively pauses a track, preventing it from being …\nPauses an audio track.\nPause the track at the head of the queue.\nSets a track to playing if it is paused.\nUnpauses an audio track.\nThe total time a track has been played for.\nTotal playback time, increasing monotonically.\nThe current play status of this track.\nWhether or not this sound is currently playing.\nPlay status (e.g., active, paused, stopped) of this track.\nThe current position within this track.\nCurrent playback position in the source.\nWhether this track has been made live, is being processed, …\nWhether this track has been made live, is being processed, …\nConsumes this handle to await a reply from the driver, …\nConsumes this handle to await a reply from the driver …\nResume the track at the head of the queue.\nRequests a seek to the given time for this track.\nSeeks along the track to the specified position.\nSeeks along the track to the specified position.\nSets the volume of an audio track.\nSkip to the next track in the queue, if it exists.\nManually stops a track.\nStops an audio track.\nStop the currently playing track, and clears the queue.\nAllows access to this track’s attached <code>TypeMap</code>.\nReturns this track’s unique identifier.\nReturns this handle’s (and track’s) unique identifier.\nUnique identifier for this track.\nSets <code>volume</code> in a manner that allows method chaining.\nThe current mixing volume of this track.\nThe volume for playback.\nCurrent volume of this track.")